package org.facilelogin.api.security;

import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import com.nimbusds.jwt.JWTClaimsSet;
import com.nimbusds.jwt.PlainJWT;

public class HMACJWTBuilder {

	public static void main(String[] args) throws ParseException {
		parsePlainJWT();
	}

	public static String buildHmacSha256SignedJWT(String sharedSecretString) throws JOSEException {
		// create a claim set.
		JWTClaimsSet jwtClaims = new JWTClaimsSet();

		// set the value of the issuer.
		jwtClaims.setIssuer("https://apress.com");

		// set the subject value - JWT belongs to this subject.
		jwtClaims.setSubject("john");

		// set values for audience restriction.
		List<String> aud = new ArrayList<String>();
		aud.add("https://app1.foo.com");
		aud.add("https://app2.foo.com");
		jwtClaims.setAudience(aud);

		// expiration time set to 10 minutes.
		jwtClaims.setExpirationTime(new Date(new Date().getTime() + 1000 * 60 * 10));

		Date currentTime = new Date();

		// set the valid from time to current time.
		jwtClaims.setNotBeforeTime(currentTime);

		// set issued time to current time.
		jwtClaims.setIssueTime(currentTime);

		// set a generated UUID as the JWT identifier.
		jwtClaims.setJWTID(UUID.randomUUID().toString());

		// create JWS header with HMAC-SHA256 algorithm.
		JWSHeader jswHeader = new JWSHeader(JWSAlgorithm.HS256);

		// create signer with the provider shared secret.
		JWSSigner signer = new MACSigner(sharedSecretString);

		// create the signed JWT with the JWS header and the JWT body.
		SignedJWT signedJWT = new SignedJWT(jswHeader, jwtClaims);

		// sign the JWT with HMAC-SHA256.
		signedJWT.sign(signer);

		// serialize into base64-encoded text.
		String jwtInText = signedJWT.serialize();

		// print the value of the JWT.
		System.out.println(jwtInText);

		return jwtInText;

	}
}
